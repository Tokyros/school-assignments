{"version":3,"sources":["login-page/index.tsx","api/index.tsx","feed-page/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["LoginPage","React","email","setUserName","password","setPassword","api","APIContext","history","useHistory","onLoginSuccess","push","auth","checkLogin","then","className","onSubmit","e","preventDefault","login","htmlFor","autoComplete","name","type","value","onChange","target","onClick","signup","API_BASE_URI","Axios","defaults","withCredentials","createApi","http","AUTH_BASE_URI","FEED_BASE_URI","loginData","post","logout","get","feed","getAllPosts","res","data","posts","addPost","FeedPage","setPosts","writingNewPost","setWritingNewPost","postContent","setPostContent","a","catch","newPostModal","map","content","createContext","AuthContext","setUser","AppInner","path","exact","ren","to","App","useState","user","useRef","Provider","current","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.d125e0bd.chunk.js","sourcesContent":["import * as React from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport { LoginData } from '../model/auth';\nimport { APIContext } from '../App';\nimport { AxiosError } from 'axios';\n\nexport type LoginPageProps = {\n}\n\nexport const LoginPage: React.FC<LoginPageProps> = ({}) => {\n    const [email, setUserName] = React.useState('');\n    const [password, setPassword] = React.useState('');\n    const api = React.useContext(APIContext);\n    const history = useHistory();\n\n    const onLoginSuccess = () => {\n        history.push('/feed');\n    }\n\n    const onLogin = () => {\n        return api.auth.login({email, password});\n    }\n\n    React.useEffect(() => {\n        api.auth.checkLogin().then(onLoginSuccess)\n    }, []);\n    \n    const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n        // Prevents form from sending request to server\n        e.preventDefault();\n        onLogin().then(onLoginSuccess);\n    }\n\n    const onSignup = () => {\n        api.auth.signup({email: email, password});\n    }\n\n    return (\n        <div className='login-page'>\n            <form onSubmit={onSubmit}>\n                <label htmlFor=\"user-email\">Username</label>\n                <input autoComplete='email' name=\"user-email\" type=\"email\" value={email} onChange={(e) => setUserName(e.target.value)}/>\n                <label htmlFor=\"password\">Password</label>\n                <input autoComplete='current-password' name=\"password\" type=\"password\" value={password} onChange={(e) => setPassword(e.target.value)}/>\n                <input type=\"submit\"/>\n            </form>\n            <button onClick={onSignup}>first time? signup!</button>\n        </div>\n    )\n}","import Axios, { AxiosStatic } from 'axios';\nimport { LoginData } from '../model/auth';\nimport { Post } from '../model/posts';\n\nconst SERVER_BASE_URI = 'http://localhost';\nconst API_BASE_URI = `${SERVER_BASE_URI}/api`;\nAxios.defaults.withCredentials = true;\n\nexport type API = {\n    auth: {\n        login: (loginData: LoginData) => Promise<void>;\n        signup: (loginData: LoginData) => Promise<void>;\n        logout: () => Promise<void>;\n        checkLogin: () => Promise<void>;\n    },\n    feed: {\n        getAllPosts: () => Promise<Post[]>;\n        addPost: (post: {postContent: string}) => Promise<Post>;\n    }\n}\n\nexport const createApi = (http: AxiosStatic): API => {\n    const AUTH_BASE_URI = `${API_BASE_URI}/auth`;\n    const FEED_BASE_URI = `${API_BASE_URI}/feed`;\n    return {\n\n        auth: {\n            login: (loginData: LoginData) => {\n                return http.post(`${AUTH_BASE_URI}/login`, loginData);\n            },\n            signup: (loginData: LoginData) => {\n                return http.post(`${AUTH_BASE_URI}/signup`, loginData);\n            },\n            logout: () => {\n                return http.get(`${AUTH_BASE_URI}/logout`);\n            },\n            checkLogin: () => {\n                return http.get(`${SERVER_BASE_URI}/users`, {withCredentials: true});\n            },\n        },\n        feed: {\n            getAllPosts: () => {\n                return http.get<{posts: Post[]}>(`${FEED_BASE_URI}/all`).then((res) => res.data.posts);\n            },\n            addPost: (post) => {\n                return http.post<Post>(`${FEED_BASE_URI}/add`, post).then((res) => res.data);\n            }\n        }\n    }\n    \n}","import * as React from 'react';\nimport { APIContext } from '../App';\nimport { useHistory } from 'react-router-dom';\nimport { Post } from '../model/posts';\n\nexport const FeedPage: React.FC = () => {\n    const [posts, setPosts] = React.useState<Post[]>([]);\n    const [writingNewPost, setWritingNewPost] = React.useState(false);\n    const [postContent, setPostContent] = React.useState('');\n\n    const api = React.useContext(APIContext);\n    const history = useHistory();\n\n    React.useEffect(() => {\n        api.auth.checkLogin().then(async () => {\n            const posts = await api.feed.getAllPosts();\n            setPosts(posts);\n        }).catch(() => {\n            history.push('/')\n        })\n    }, []);\n\n    const submitPost = () => {\n        api.feed.addPost({\n            postContent\n        }).then((post) => {\n            setPosts([...posts, post]);\n        })\n    }\n\n    const newPostModal = writingNewPost && (\n        <div>\n            <input type='text' value={postContent} onChange={(e) => setPostContent(e.target.value)}/>\n            <button onClick={submitPost}>SUBMIT</button>\n        </div>\n    )\n\n    return (\n        <div>\n            <div className='header'>\n                <button>SEARCH</button>\n                <button onClick={() => setWritingNewPost(true)}>NEW POST</button>\n            </div>\n            <div className='posts-list'>\n                {posts.map((post) => {\n                    return (\n                        <div>\n                            {post.content}\n                        </div>\n                    )\n                })}\n            </div>\n            {newPostModal}\n        </div>\n    )\n}","import React, { useEffect, createContext, useContext } from 'react';\nimport './App.css';\nimport { LoginPage } from './login-page';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect,\n  useRouteMatch,\n  useHistory\n} from 'react-router-dom'\nimport { createApi, API } from './api';\nimport Axios from 'axios';\nimport { AuthenticatedUser } from './model/auth';\nimport { FeedPage } from './feed-page';\n\nexport const APIContext = createContext<API>(createApi(Axios));\nexport const AuthContext = createContext<{user?: AuthenticatedUser, setUser: (user: AuthenticatedUser) => void}>({\n  setUser: () => null\n});\n\nfunction AppInner() {\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route path='/feed'>\n          <FeedPage/>\n        </Route>\n        <Route path='/' exact={true} ren>\n          <LoginPage/>\n        </Route>\n        <Redirect to='/'/>\n      </Switch>\n    </div>\n  )\n}\n\nfunction App() {\n  const [user, setUser] = React.useState<AuthenticatedUser | undefined>();\n  const api = React.useRef(createApi(Axios));\n\n  return (\n    <Router>\n      <AuthContext.Provider value={{user, setUser}}>\n        <APIContext.Provider value={api.current}>\n          <AppInner/>\n        </APIContext.Provider>\n      </AuthContext.Provider>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}